AWSTemplateFormatVersion: '2010-09-09'
Description: 'CDP Wallet and X402 Payment Gateway Integration for NFT Transactions'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Deployment environment
    
  KmsAdminRole:    Type: String
    Default: ""
    Description: IAM Role ARN that can administer the KMS key (Optional - leave empty to use the current IAM role)
    
  SecretsManagerArn:
    Type: String
    Default: ""
    Description: ARN of the Secrets Manager secret containing API keys and payment configuration
    
Conditions:
  HasKmsAdminRole: !Not [!Equals [!Ref KmsAdminRole, ""]]
  HasSecretsManagerArn: !Not [!Equals [!Ref SecretsManagerArn, ""]]
    
Resources:
  # KMS Key for encrypting sensitive payment data
  PaymentEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Key for encrypting payment transaction data
      KeyPolicy:
        Version: '2012-10-17'
        Id: payment-key-policy
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - !If
            - HasKmsAdminRole
            - Sid: Allow KMS Administration
              Effect: Allow
              Principal:
                AWS: !Ref KmsAdminRole
              Action:
                - 'kms:Create*'
                - 'kms:Describe*'
                - 'kms:Enable*'
                - 'kms:List*'
                - 'kms:Put*'
                - 'kms:Update*'
                - 'kms:Revoke*'
                - 'kms:Disable*'
                - 'kms:Get*'
                - 'kms:Delete*'
                - 'kms:TagResource'
                - 'kms:UntagResource'
                - 'kms:ScheduleKeyDeletion'
                - 'kms:CancelKeyDeletion'
              Resource: '*'
            - !Ref AWS::NoValue
            
  # DynamoDB Table for storing wallet sessions
  WalletSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'NFTWalletSessions-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: wallet_address
          AttributeType: S
        - AttributeName: session_id
          AttributeType: S
      KeySchema:
        - AttributeName: wallet_address
          KeyType: HASH
        - AttributeName: session_id
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref PaymentEncryptionKey

  # DynamoDB for transaction records
  PaymentTransactionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'NFTPaymentTransactions-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: payment_id
          AttributeType: S
      KeySchema:
        - AttributeName: payment_id
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref PaymentEncryptionKey

  # IAM Role for Payment Lambda
  PaymentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: PaymentLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource: 
                  - !GetAtt PaymentTransactionTable.Arn
                  - !GetAtt WalletSessionsTable.Arn
              - Effect: Allow
                Action:
                  - 'kms:Encrypt'
                  - 'kms:Decrypt'
                  - 'kms:GenerateDataKey'
                Resource: !GetAtt PaymentEncryptionKey.Arn              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/PaymentHandler-${Environment}:*'
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:DescribeSecret'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'

  # Payment Lambda Function
  PaymentLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'PaymentHandler-${Environment}'
      Handler: payment_handler.lambda_handler
      Role: !GetAtt PaymentLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          
          def lambda_handler(event, context):
              # This is a placeholder function that will be replaced with the actual code
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'message': 'Payment handler Lambda function deployed successfully. Please update with actual code.'
                  })
              }      Runtime: python3.9
      Timeout: 120
      MemorySize: 512
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TRANSACTION_TABLE_NAME: !Ref PaymentTransactionTable
          WALLET_SESSIONS_TABLE: !Ref WalletSessionsTable
          KMS_KEY_ID: !Ref PaymentEncryptionKey
          X402_API_ENDPOINT: !Sub 'https://api.x402.com/${Environment}'
          # NFT API keys can be set in environment variables as a fallback
          # It's better to set these in AWS Secrets Manager
          RESERVOIR_API_KEY: ""
          OPENSEA_API_KEY: ""
          NFTGO_API_KEY: ""          # Default values for payment settings
          DEFAULT_CURRENCY: "ETH"
          SUPPORTED_CURRENCIES: "ETH,USDC,USDT,DAI"
          MIN_PAYMENT_AMOUNT: "0.001"
          MAX_PAYMENT_AMOUNT: "10.0"
          # Secrets Manager ARN (if provided)
          SECRETS_MANAGER_ARN: !If [HasSecretsManagerArn, !Ref SecretsManagerArn, ""]
      # Removed ReservedConcurrentExecutions setting to avoid account limit errors
      TracingConfig:
        Mode: Active
      
  # API Gateway for secure access
  PaymentAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'nft-payment-api-${Environment}'
      Description: 'API for NFT Payment processing with CDP Wallet'
      EndpointConfiguration:
        Types:
          - REGIONAL
      
  # API Gateway Resources
  PaymentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PaymentAPI
      ParentId: !GetAtt PaymentAPI.RootResourceId
      PathPart: 'payment'
      
  # Payment POST Method
  PaymentPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PaymentAPI
      ResourceId: !Ref PaymentResource
      HttpMethod: POST
      AuthorizationType: NONE  # In production, you should use API keys or JWT auth
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PaymentLambdaFunction.Arn}/invocations'
      
  # API Gateway Deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PaymentPostMethod
    Properties:
      RestApiId: !Ref PaymentAPI
      StageName: !Ref Environment
      
  # Lambda Permission for API Gateway
  LambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref PaymentLambdaFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PaymentAPI}/*'
      
  # CloudWatch Alarms for security monitoring
  PaymentErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'PaymentErrorAlarm-${Environment}'
      AlarmDescription: 'Alarm for payment processing errors'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 3
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PaymentLambdaFunction
      
Outputs:
  PaymentApiEndpoint:
    Description: 'API Gateway endpoint URL for payment processing'
    Value: !Sub 'https://${PaymentAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/payment'
    
  PaymentLambdaArn:
    Description: 'Payment Lambda Function ARN'
    Value: !GetAtt PaymentLambdaFunction.Arn
    
  PaymentTableName:
    Description: 'DynamoDB Table for payment transactions'
    Value: !Ref PaymentTransactionTable

  WalletSessionsTableName:
    Description: 'DynamoDB Table for wallet sessions'
    Value: !Ref WalletSessionsTable
